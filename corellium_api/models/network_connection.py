# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class NetworkConnection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'provider': 'str',
        'name': 'str',
        'config': 'object',
        'projects': 'list[ProjectNetworkState]',
        'created_at': 'str',
        'updated_at': 'str',
        'created_by': 'str',
        'updated_by': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'provider': 'provider',
        'name': 'name',
        'config': 'config',
        'projects': 'projects',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy'
    }

    def __init__(self, identifier=None, provider=None, name=None, config=None, projects=None, created_at=None, updated_at=None, created_by=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """NetworkConnection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._provider = None
        self._name = None
        self._config = None
        self._projects = None
        self._created_at = None
        self._updated_at = None
        self._created_by = None
        self._updated_by = None
        self.discriminator = None

        self.identifier = identifier
        self.provider = provider
        self.name = name
        self.config = config
        self.projects = projects
        self.created_at = created_at
        self.updated_at = updated_at
        self.created_by = created_by
        self.updated_by = updated_by

    @property
    def identifier(self):
        """Gets the identifier of this NetworkConnection.  # noqa: E501

        UUIDv4  # noqa: E501

        :return: The identifier of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this NetworkConnection.

        UUIDv4  # noqa: E501

        :param identifier: The identifier of this NetworkConnection.  # noqa: E501
        :type identifier: str
        """
        if self.local_vars_configuration.client_side_validation and identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def provider(self):
        """Gets the provider of this NetworkConnection.  # noqa: E501

        One of the registered [network provider types](#get-/v1/network/providers)  # noqa: E501

        :return: The provider of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NetworkConnection.

        One of the registered [network provider types](#get-/v1/network/providers)  # noqa: E501

        :param provider: The provider of this NetworkConnection.  # noqa: E501
        :type provider: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def name(self):
        """Gets the name of this NetworkConnection.  # noqa: E501

        User specified name for this network connection. e.g., \"My Network Connection\"  # noqa: E501

        :return: The name of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkConnection.

        User specified name for this network connection. e.g., \"My Network Connection\"  # noqa: E501

        :param name: The name of this NetworkConnection.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def config(self):
        """Gets the config of this NetworkConnection.  # noqa: E501

        An object containing network connection configuration data. Will vary based on network provider type.  # noqa: E501

        :return: The config of this NetworkConnection.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this NetworkConnection.

        An object containing network connection configuration data. Will vary based on network provider type.  # noqa: E501

        :param config: The config of this NetworkConnection.  # noqa: E501
        :type config: object
        """
        if self.local_vars_configuration.client_side_validation and config is None:  # noqa: E501
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def projects(self):
        """Gets the projects of this NetworkConnection.  # noqa: E501

        An object where the keys are project IDs and the values are {@link ProjectNetworkState} objects representing the state of each project.  # noqa: E501

        :return: The projects of this NetworkConnection.  # noqa: E501
        :rtype: list[ProjectNetworkState]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this NetworkConnection.

        An object where the keys are project IDs and the values are {@link ProjectNetworkState} objects representing the state of each project.  # noqa: E501

        :param projects: The projects of this NetworkConnection.  # noqa: E501
        :type projects: list[ProjectNetworkState]
        """

        self._projects = projects

    @property
    def created_at(self):
        """Gets the created_at of this NetworkConnection.  # noqa: E501

        Created Date in ISO-8601 format e.g., \"2022-05-06T02:39:23.000Z\"  # noqa: E501

        :return: The created_at of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NetworkConnection.

        Created Date in ISO-8601 format e.g., \"2022-05-06T02:39:23.000Z\"  # noqa: E501

        :param created_at: The created_at of this NetworkConnection.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this NetworkConnection.  # noqa: E501

        Updated Date in ISO-8601 format e.g., \"2022-05-06T02:39:23.000Z\"  # noqa: E501

        :return: The updated_at of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NetworkConnection.

        Updated Date in ISO-8601 format e.g., \"2022-05-06T02:39:23.000Z\"  # noqa: E501

        :param updated_at: The updated_at of this NetworkConnection.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def created_by(self):
        """Gets the created_by of this NetworkConnection.  # noqa: E501

        UUIDv4 of the user who created this record.  # noqa: E501

        :return: The created_by of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this NetworkConnection.

        UUIDv4 of the user who created this record.  # noqa: E501

        :param created_by: The created_by of this NetworkConnection.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this NetworkConnection.  # noqa: E501

        UUIDv4 of the user who last updated this record.  # noqa: E501

        :return: The updated_by of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this NetworkConnection.

        UUIDv4 of the user who last updated this record.  # noqa: E501

        :param updated_by: The updated_by of this NetworkConnection.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkConnection):
            return True

        return self.to_dict() != other.to_dict()
