# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class Pagination(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_page': 'float',
        'total_pages': 'float',
        'total_items': 'float',
        'items_per_page': 'float'
    }

    attribute_map = {
        'current_page': 'currentPage',
        'total_pages': 'totalPages',
        'total_items': 'totalItems',
        'items_per_page': 'itemsPerPage'
    }

    def __init__(self, current_page=None, total_pages=None, total_items=None, items_per_page=None, local_vars_configuration=None):  # noqa: E501
        """Pagination - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._current_page = None
        self._total_pages = None
        self._total_items = None
        self._items_per_page = None
        self.discriminator = None

        self.current_page = current_page
        self.total_pages = total_pages
        self.total_items = total_items
        self.items_per_page = items_per_page

    @property
    def current_page(self):
        """Gets the current_page of this Pagination.  # noqa: E501

        The current page  # noqa: E501

        :return: The current_page of this Pagination.  # noqa: E501
        :rtype: float
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this Pagination.

        The current page  # noqa: E501

        :param current_page: The current_page of this Pagination.  # noqa: E501
        :type current_page: float
        """

        self._current_page = current_page

    @property
    def total_pages(self):
        """Gets the total_pages of this Pagination.  # noqa: E501

        The total number of pages  # noqa: E501

        :return: The total_pages of this Pagination.  # noqa: E501
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this Pagination.

        The total number of pages  # noqa: E501

        :param total_pages: The total_pages of this Pagination.  # noqa: E501
        :type total_pages: float
        """

        self._total_pages = total_pages

    @property
    def total_items(self):
        """Gets the total_items of this Pagination.  # noqa: E501

        The total number of activity entries  # noqa: E501

        :return: The total_items of this Pagination.  # noqa: E501
        :rtype: float
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this Pagination.

        The total number of activity entries  # noqa: E501

        :param total_items: The total_items of this Pagination.  # noqa: E501
        :type total_items: float
        """

        self._total_items = total_items

    @property
    def items_per_page(self):
        """Gets the items_per_page of this Pagination.  # noqa: E501

        The number of activity entries per page  # noqa: E501

        :return: The items_per_page of this Pagination.  # noqa: E501
        :rtype: float
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this Pagination.

        The number of activity entries per page  # noqa: E501

        :param items_per_page: The items_per_page of this Pagination.  # noqa: E501
        :type items_per_page: float
        """

        self._items_per_page = items_per_page

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pagination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pagination):
            return True

        return self.to_dict() != other.to_dict()
