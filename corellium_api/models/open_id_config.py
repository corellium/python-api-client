# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class OpenIDConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'discovery_url': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'invited_only': 'bool'
    }

    attribute_map = {
        'discovery_url': 'discoveryUrl',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'invited_only': 'invitedOnly'
    }

    def __init__(self, discovery_url=None, client_id=None, client_secret=None, invited_only=None, local_vars_configuration=None):  # noqa: E501
        """OpenIDConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._discovery_url = None
        self._client_id = None
        self._client_secret = None
        self._invited_only = None
        self.discriminator = None

        self.discovery_url = discovery_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.invited_only = invited_only

    @property
    def discovery_url(self):
        """Gets the discovery_url of this OpenIDConfig.  # noqa: E501

        Service Discovery URL  # noqa: E501

        :return: The discovery_url of this OpenIDConfig.  # noqa: E501
        :rtype: str
        """
        return self._discovery_url

    @discovery_url.setter
    def discovery_url(self, discovery_url):
        """Sets the discovery_url of this OpenIDConfig.

        Service Discovery URL  # noqa: E501

        :param discovery_url: The discovery_url of this OpenIDConfig.  # noqa: E501
        :type discovery_url: str
        """

        self._discovery_url = discovery_url

    @property
    def client_id(self):
        """Gets the client_id of this OpenIDConfig.  # noqa: E501

        Service Client ID  # noqa: E501

        :return: The client_id of this OpenIDConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OpenIDConfig.

        Service Client ID  # noqa: E501

        :param client_id: The client_id of this OpenIDConfig.  # noqa: E501
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OpenIDConfig.  # noqa: E501

        Service Client Secret  # noqa: E501

        :return: The client_secret of this OpenIDConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OpenIDConfig.

        Service Client Secret  # noqa: E501

        :param client_secret: The client_secret of this OpenIDConfig.  # noqa: E501
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def invited_only(self):
        """Gets the invited_only of this OpenIDConfig.  # noqa: E501

        Only accept individuals with invitations  # noqa: E501

        :return: The invited_only of this OpenIDConfig.  # noqa: E501
        :rtype: bool
        """
        return self._invited_only

    @invited_only.setter
    def invited_only(self, invited_only):
        """Sets the invited_only of this OpenIDConfig.

        Only accept individuals with invitations  # noqa: E501

        :param invited_only: The invited_only of this OpenIDConfig.  # noqa: E501
        :type invited_only: bool
        """

        self._invited_only = invited_only

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenIDConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenIDConfig):
            return True

        return self.to_dict() != other.to_dict()
