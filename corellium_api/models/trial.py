# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class Trial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_duration': 'float',
        'default_hours': 'float',
        'default_devices': 'float',
        'default_cores': 'float'
    }

    attribute_map = {
        'default_duration': 'defaultDuration',
        'default_hours': 'defaultHours',
        'default_devices': 'defaultDevices',
        'default_cores': 'defaultCores'
    }

    def __init__(self, default_duration=None, default_hours=None, default_devices=None, default_cores=None, local_vars_configuration=None):  # noqa: E501
        """Trial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._default_duration = None
        self._default_hours = None
        self._default_devices = None
        self._default_cores = None
        self.discriminator = None

        self.default_duration = default_duration
        self.default_hours = default_hours
        self.default_devices = default_devices
        self.default_cores = default_cores

    @property
    def default_duration(self):
        """Gets the default_duration of this Trial.  # noqa: E501

        Maintenance message  # noqa: E501

        :return: The default_duration of this Trial.  # noqa: E501
        :rtype: float
        """
        return self._default_duration

    @default_duration.setter
    def default_duration(self, default_duration):
        """Sets the default_duration of this Trial.

        Maintenance message  # noqa: E501

        :param default_duration: The default_duration of this Trial.  # noqa: E501
        :type default_duration: float
        """

        self._default_duration = default_duration

    @property
    def default_hours(self):
        """Gets the default_hours of this Trial.  # noqa: E501

        Maintenance header  # noqa: E501

        :return: The default_hours of this Trial.  # noqa: E501
        :rtype: float
        """
        return self._default_hours

    @default_hours.setter
    def default_hours(self, default_hours):
        """Sets the default_hours of this Trial.

        Maintenance header  # noqa: E501

        :param default_hours: The default_hours of this Trial.  # noqa: E501
        :type default_hours: float
        """

        self._default_hours = default_hours

    @property
    def default_devices(self):
        """Gets the default_devices of this Trial.  # noqa: E501

        Maintenance header  # noqa: E501

        :return: The default_devices of this Trial.  # noqa: E501
        :rtype: float
        """
        return self._default_devices

    @default_devices.setter
    def default_devices(self, default_devices):
        """Sets the default_devices of this Trial.

        Maintenance header  # noqa: E501

        :param default_devices: The default_devices of this Trial.  # noqa: E501
        :type default_devices: float
        """

        self._default_devices = default_devices

    @property
    def default_cores(self):
        """Gets the default_cores of this Trial.  # noqa: E501

        Maintenance header  # noqa: E501

        :return: The default_cores of this Trial.  # noqa: E501
        :rtype: float
        """
        return self._default_cores

    @default_cores.setter
    def default_cores(self, default_cores):
        """Sets the default_cores of this Trial.

        Maintenance header  # noqa: E501

        :param default_cores: The default_cores of this Trial.  # noqa: E501
        :type default_cores: float
        """

        self._default_cores = default_cores

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Trial):
            return True

        return self.to_dict() != other.to_dict()
