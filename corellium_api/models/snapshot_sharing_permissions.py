# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class SnapshotSharingPermissions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud_enabled': 'bool',
        'domain_enabled': 'bool',
        'public_link': 'bool',
        'domain_restricted_link': 'bool',
        'password_public_link': 'bool',
        'email_invite': 'bool'
    }

    attribute_map = {
        'cloud_enabled': 'cloudEnabled',
        'domain_enabled': 'domainEnabled',
        'public_link': 'publicLink',
        'domain_restricted_link': 'domainRestrictedLink',
        'password_public_link': 'passwordPublicLink',
        'email_invite': 'emailInvite'
    }

    def __init__(self, cloud_enabled=None, domain_enabled=None, public_link=None, domain_restricted_link=None, password_public_link=None, email_invite=None, local_vars_configuration=None):  # noqa: E501
        """SnapshotSharingPermissions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cloud_enabled = None
        self._domain_enabled = None
        self._public_link = None
        self._domain_restricted_link = None
        self._password_public_link = None
        self._email_invite = None
        self.discriminator = None

        self.cloud_enabled = cloud_enabled
        self.domain_enabled = domain_enabled
        self.public_link = public_link
        self.domain_restricted_link = domain_restricted_link
        self.password_public_link = password_public_link
        self.email_invite = email_invite

    @property
    def cloud_enabled(self):
        """Gets the cloud_enabled of this SnapshotSharingPermissions.  # noqa: E501

        Indicates if snapshot permissions are enabled by the cloud admin  # noqa: E501

        :return: The cloud_enabled of this SnapshotSharingPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_enabled

    @cloud_enabled.setter
    def cloud_enabled(self, cloud_enabled):
        """Sets the cloud_enabled of this SnapshotSharingPermissions.

        Indicates if snapshot permissions are enabled by the cloud admin  # noqa: E501

        :param cloud_enabled: The cloud_enabled of this SnapshotSharingPermissions.  # noqa: E501
        :type cloud_enabled: bool
        """

        self._cloud_enabled = cloud_enabled

    @property
    def domain_enabled(self):
        """Gets the domain_enabled of this SnapshotSharingPermissions.  # noqa: E501

        Indicates if snapshot permissions are enabled by the domain admin  # noqa: E501

        :return: The domain_enabled of this SnapshotSharingPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._domain_enabled

    @domain_enabled.setter
    def domain_enabled(self, domain_enabled):
        """Sets the domain_enabled of this SnapshotSharingPermissions.

        Indicates if snapshot permissions are enabled by the domain admin  # noqa: E501

        :param domain_enabled: The domain_enabled of this SnapshotSharingPermissions.  # noqa: E501
        :type domain_enabled: bool
        """

        self._domain_enabled = domain_enabled

    @property
    def public_link(self):
        """Gets the public_link of this SnapshotSharingPermissions.  # noqa: E501

        Indicates if public link access is enabled  # noqa: E501

        :return: The public_link of this SnapshotSharingPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._public_link

    @public_link.setter
    def public_link(self, public_link):
        """Sets the public_link of this SnapshotSharingPermissions.

        Indicates if public link access is enabled  # noqa: E501

        :param public_link: The public_link of this SnapshotSharingPermissions.  # noqa: E501
        :type public_link: bool
        """

        self._public_link = public_link

    @property
    def domain_restricted_link(self):
        """Gets the domain_restricted_link of this SnapshotSharingPermissions.  # noqa: E501

        Indicates if domain-restricted link access is enabled  # noqa: E501

        :return: The domain_restricted_link of this SnapshotSharingPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._domain_restricted_link

    @domain_restricted_link.setter
    def domain_restricted_link(self, domain_restricted_link):
        """Sets the domain_restricted_link of this SnapshotSharingPermissions.

        Indicates if domain-restricted link access is enabled  # noqa: E501

        :param domain_restricted_link: The domain_restricted_link of this SnapshotSharingPermissions.  # noqa: E501
        :type domain_restricted_link: bool
        """

        self._domain_restricted_link = domain_restricted_link

    @property
    def password_public_link(self):
        """Gets the password_public_link of this SnapshotSharingPermissions.  # noqa: E501

        Indicates if password-protected public link access is enabled  # noqa: E501

        :return: The password_public_link of this SnapshotSharingPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._password_public_link

    @password_public_link.setter
    def password_public_link(self, password_public_link):
        """Sets the password_public_link of this SnapshotSharingPermissions.

        Indicates if password-protected public link access is enabled  # noqa: E501

        :param password_public_link: The password_public_link of this SnapshotSharingPermissions.  # noqa: E501
        :type password_public_link: bool
        """

        self._password_public_link = password_public_link

    @property
    def email_invite(self):
        """Gets the email_invite of this SnapshotSharingPermissions.  # noqa: E501

        Indicates if email invite access is enabled  # noqa: E501

        :return: The email_invite of this SnapshotSharingPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._email_invite

    @email_invite.setter
    def email_invite(self, email_invite):
        """Sets the email_invite of this SnapshotSharingPermissions.

        Indicates if email invite access is enabled  # noqa: E501

        :param email_invite: The email_invite of this SnapshotSharingPermissions.  # noqa: E501
        :type email_invite: bool
        """

        self._email_invite = email_invite

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotSharingPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotSharingPermissions):
            return True

        return self.to_dict() != other.to_dict()
