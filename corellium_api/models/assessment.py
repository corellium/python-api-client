# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class Assessment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'created_by': 'str',
        'report_id': 'str',
        'bundle': 'object',
        'results': 'object',
        'metadata': 'object',
        'wordlist': 'object',
        'instance_id': 'str',
        'bundle_id': 'str',
        'wordlist_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'created_by': 'createdBy',
        'report_id': 'reportId',
        'bundle': 'bundle',
        'results': 'results',
        'metadata': 'metadata',
        'wordlist': 'wordlist',
        'instance_id': 'instanceId',
        'bundle_id': 'bundleId',
        'wordlist_id': 'wordlistId',
        'status': 'status'
    }

    def __init__(self, created_at=None, updated_at=None, created_by=None, report_id=None, bundle=None, results=None, metadata=None, wordlist=None, instance_id=None, bundle_id=None, wordlist_id=None, status=None, local_vars_configuration=None):  # noqa: E501
        """Assessment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._updated_at = None
        self._created_by = None
        self._report_id = None
        self._bundle = None
        self._results = None
        self._metadata = None
        self._wordlist = None
        self._instance_id = None
        self._bundle_id = None
        self._wordlist_id = None
        self._status = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if created_by is not None:
            self.created_by = created_by
        if report_id is not None:
            self.report_id = report_id
        if bundle is not None:
            self.bundle = bundle
        if results is not None:
            self.results = results
        if metadata is not None:
            self.metadata = metadata
        if wordlist is not None:
            self.wordlist = wordlist
        self.instance_id = instance_id
        self.bundle_id = bundle_id
        if wordlist_id is not None:
            self.wordlist_id = wordlist_id
        self.status = status

    @property
    def created_at(self):
        """Gets the created_at of this Assessment.  # noqa: E501


        :return: The created_at of this Assessment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Assessment.


        :param created_at: The created_at of this Assessment.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Assessment.  # noqa: E501


        :return: The updated_at of this Assessment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Assessment.


        :param updated_at: The updated_at of this Assessment.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def created_by(self):
        """Gets the created_by of this Assessment.  # noqa: E501


        :return: The created_by of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Assessment.


        :param created_by: The created_by of this Assessment.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def report_id(self):
        """Gets the report_id of this Assessment.  # noqa: E501


        :return: The report_id of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this Assessment.


        :param report_id: The report_id of this Assessment.  # noqa: E501
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def bundle(self):
        """Gets the bundle of this Assessment.  # noqa: E501


        :return: The bundle of this Assessment.  # noqa: E501
        :rtype: object
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this Assessment.


        :param bundle: The bundle of this Assessment.  # noqa: E501
        :type bundle: object
        """

        self._bundle = bundle

    @property
    def results(self):
        """Gets the results of this Assessment.  # noqa: E501


        :return: The results of this Assessment.  # noqa: E501
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Assessment.


        :param results: The results of this Assessment.  # noqa: E501
        :type results: object
        """

        self._results = results

    @property
    def metadata(self):
        """Gets the metadata of this Assessment.  # noqa: E501


        :return: The metadata of this Assessment.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Assessment.


        :param metadata: The metadata of this Assessment.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def wordlist(self):
        """Gets the wordlist of this Assessment.  # noqa: E501


        :return: The wordlist of this Assessment.  # noqa: E501
        :rtype: object
        """
        return self._wordlist

    @wordlist.setter
    def wordlist(self, wordlist):
        """Sets the wordlist of this Assessment.


        :param wordlist: The wordlist of this Assessment.  # noqa: E501
        :type wordlist: object
        """

        self._wordlist = wordlist

    @property
    def instance_id(self):
        """Gets the instance_id of this Assessment.  # noqa: E501


        :return: The instance_id of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Assessment.


        :param instance_id: The instance_id of this Assessment.  # noqa: E501
        :type instance_id: str
        """
        if self.local_vars_configuration.client_side_validation and instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def bundle_id(self):
        """Gets the bundle_id of this Assessment.  # noqa: E501


        :return: The bundle_id of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this Assessment.


        :param bundle_id: The bundle_id of this Assessment.  # noqa: E501
        :type bundle_id: str
        """
        if self.local_vars_configuration.client_side_validation and bundle_id is None:  # noqa: E501
            raise ValueError("Invalid value for `bundle_id`, must not be `None`")  # noqa: E501

        self._bundle_id = bundle_id

    @property
    def wordlist_id(self):
        """Gets the wordlist_id of this Assessment.  # noqa: E501


        :return: The wordlist_id of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._wordlist_id

    @wordlist_id.setter
    def wordlist_id(self, wordlist_id):
        """Sets the wordlist_id of this Assessment.


        :param wordlist_id: The wordlist_id of this Assessment.  # noqa: E501
        :type wordlist_id: str
        """

        self._wordlist_id = wordlist_id

    @property
    def status(self):
        """Gets the status of this Assessment.  # noqa: E501


        :return: The status of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Assessment.


        :param status: The status of this Assessment.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assessment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Assessment):
            return True

        return self.to_dict() != other.to_dict()
