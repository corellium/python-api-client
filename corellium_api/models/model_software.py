# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 3.11.0-13738
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class ModelSoftware(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'board_config': 'str',
        'platform': 'str',
        'cpid': 'float',
        'bdid': 'float',
        'firmwares': 'list[Firmware]'
    }

    attribute_map = {
        'name': 'name',
        'board_config': 'boardConfig',
        'platform': 'platform',
        'cpid': 'cpid',
        'bdid': 'bdid',
        'firmwares': 'firmwares'
    }

    def __init__(self, name=None, board_config=None, platform=None, cpid=None, bdid=None, firmwares=None, local_vars_configuration=None):  # noqa: E501
        """ModelSoftware - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._board_config = None
        self._platform = None
        self._cpid = None
        self._bdid = None
        self._firmwares = None
        self.discriminator = None

        self.name = name
        self.board_config = board_config
        self.platform = platform
        self.cpid = cpid
        self.bdid = bdid
        self.firmwares = firmwares

    @property
    def name(self):
        """Gets the name of this ModelSoftware.  # noqa: E501


        :return: The name of this ModelSoftware.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelSoftware.


        :param name: The name of this ModelSoftware.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def board_config(self):
        """Gets the board_config of this ModelSoftware.  # noqa: E501


        :return: The board_config of this ModelSoftware.  # noqa: E501
        :rtype: str
        """
        return self._board_config

    @board_config.setter
    def board_config(self, board_config):
        """Sets the board_config of this ModelSoftware.


        :param board_config: The board_config of this ModelSoftware.  # noqa: E501
        :type board_config: str
        """

        self._board_config = board_config

    @property
    def platform(self):
        """Gets the platform of this ModelSoftware.  # noqa: E501


        :return: The platform of this ModelSoftware.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ModelSoftware.


        :param platform: The platform of this ModelSoftware.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def cpid(self):
        """Gets the cpid of this ModelSoftware.  # noqa: E501


        :return: The cpid of this ModelSoftware.  # noqa: E501
        :rtype: float
        """
        return self._cpid

    @cpid.setter
    def cpid(self, cpid):
        """Sets the cpid of this ModelSoftware.


        :param cpid: The cpid of this ModelSoftware.  # noqa: E501
        :type cpid: float
        """

        self._cpid = cpid

    @property
    def bdid(self):
        """Gets the bdid of this ModelSoftware.  # noqa: E501


        :return: The bdid of this ModelSoftware.  # noqa: E501
        :rtype: float
        """
        return self._bdid

    @bdid.setter
    def bdid(self, bdid):
        """Sets the bdid of this ModelSoftware.


        :param bdid: The bdid of this ModelSoftware.  # noqa: E501
        :type bdid: float
        """

        self._bdid = bdid

    @property
    def firmwares(self):
        """Gets the firmwares of this ModelSoftware.  # noqa: E501


        :return: The firmwares of this ModelSoftware.  # noqa: E501
        :rtype: list[Firmware]
        """
        return self._firmwares

    @firmwares.setter
    def firmwares(self, firmwares):
        """Sets the firmwares of this ModelSoftware.


        :param firmwares: The firmwares of this ModelSoftware.  # noqa: E501
        :type firmwares: list[Firmware]
        """

        self._firmwares = firmwares

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelSoftware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelSoftware):
            return True

        return self.to_dict() != other.to_dict()
