# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class SnapshotMember(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'invite_sent_at': 'float',
        'shared_on': 'float',
        'user_id': 'str',
        'label': 'str'
    }

    attribute_map = {
        'email': 'email',
        'invite_sent_at': 'inviteSentAt',
        'shared_on': 'sharedOn',
        'user_id': 'userId',
        'label': 'label'
    }

    def __init__(self, email=None, invite_sent_at=None, shared_on=None, user_id=None, label=None, local_vars_configuration=None):  # noqa: E501
        """SnapshotMember - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._invite_sent_at = None
        self._shared_on = None
        self._user_id = None
        self._label = None
        self.discriminator = None

        self.email = email
        self.invite_sent_at = invite_sent_at
        self.shared_on = shared_on
        self.user_id = user_id
        self.label = label

    @property
    def email(self):
        """Gets the email of this SnapshotMember.  # noqa: E501

        The email of the member  # noqa: E501

        :return: The email of this SnapshotMember.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SnapshotMember.

        The email of the member  # noqa: E501

        :param email: The email of this SnapshotMember.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def invite_sent_at(self):
        """Gets the invite_sent_at of this SnapshotMember.  # noqa: E501

        The date when the invite was sent  # noqa: E501

        :return: The invite_sent_at of this SnapshotMember.  # noqa: E501
        :rtype: float
        """
        return self._invite_sent_at

    @invite_sent_at.setter
    def invite_sent_at(self, invite_sent_at):
        """Sets the invite_sent_at of this SnapshotMember.

        The date when the invite was sent  # noqa: E501

        :param invite_sent_at: The invite_sent_at of this SnapshotMember.  # noqa: E501
        :type invite_sent_at: float
        """
        if self.local_vars_configuration.client_side_validation and invite_sent_at is None:  # noqa: E501
            raise ValueError("Invalid value for `invite_sent_at`, must not be `None`")  # noqa: E501

        self._invite_sent_at = invite_sent_at

    @property
    def shared_on(self):
        """Gets the shared_on of this SnapshotMember.  # noqa: E501

        UNIX Date of when the snapshot was first shared with member  # noqa: E501

        :return: The shared_on of this SnapshotMember.  # noqa: E501
        :rtype: float
        """
        return self._shared_on

    @shared_on.setter
    def shared_on(self, shared_on):
        """Sets the shared_on of this SnapshotMember.

        UNIX Date of when the snapshot was first shared with member  # noqa: E501

        :param shared_on: The shared_on of this SnapshotMember.  # noqa: E501
        :type shared_on: float
        """
        if self.local_vars_configuration.client_side_validation and shared_on is None:  # noqa: E501
            raise ValueError("Invalid value for `shared_on`, must not be `None`")  # noqa: E501

        self._shared_on = shared_on

    @property
    def user_id(self):
        """Gets the user_id of this SnapshotMember.  # noqa: E501

        The member's user ID  # noqa: E501

        :return: The user_id of this SnapshotMember.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SnapshotMember.

        The member's user ID  # noqa: E501

        :param user_id: The user_id of this SnapshotMember.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def label(self):
        """Gets the label of this SnapshotMember.  # noqa: E501

        The user's label or name  # noqa: E501

        :return: The label of this SnapshotMember.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SnapshotMember.

        The user's label or name  # noqa: E501

        :param label: The label of this SnapshotMember.  # noqa: E501
        :type label: str
        """

        self._label = label

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotMember):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotMember):
            return True

        return self.to_dict() != other.to_dict()
