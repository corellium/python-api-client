# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class MeteredSubscriptionUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burst_rate': 'float',
        'allocated_hours': 'float',
        'plan_billed_amount': 'float',
        'plan_billed_units': 'float',
        'burst_billed_amount': 'float',
        'burst_billed_units': 'float',
        'burst_outstanding_amount': 'float',
        'burst_outstanding_units': 'float',
        'total_usage_amount': 'float',
        'total_used_units': 'float'
    }

    attribute_map = {
        'burst_rate': 'burst_rate',
        'allocated_hours': 'allocated_hours',
        'plan_billed_amount': 'plan_billed_amount',
        'plan_billed_units': 'plan_billed_units',
        'burst_billed_amount': 'burst_billed_amount',
        'burst_billed_units': 'burst_billed_units',
        'burst_outstanding_amount': 'burst_outstanding_amount',
        'burst_outstanding_units': 'burst_outstanding_units',
        'total_usage_amount': 'total_usage_amount',
        'total_used_units': 'total_used_units'
    }

    def __init__(self, burst_rate=None, allocated_hours=None, plan_billed_amount=None, plan_billed_units=None, burst_billed_amount=None, burst_billed_units=None, burst_outstanding_amount=None, burst_outstanding_units=None, total_usage_amount=None, total_used_units=None, local_vars_configuration=None):  # noqa: E501
        """MeteredSubscriptionUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._burst_rate = None
        self._allocated_hours = None
        self._plan_billed_amount = None
        self._plan_billed_units = None
        self._burst_billed_amount = None
        self._burst_billed_units = None
        self._burst_outstanding_amount = None
        self._burst_outstanding_units = None
        self._total_usage_amount = None
        self._total_used_units = None
        self.discriminator = None

        self.burst_rate = burst_rate
        self.allocated_hours = allocated_hours
        self.plan_billed_amount = plan_billed_amount
        self.plan_billed_units = plan_billed_units
        self.burst_billed_amount = burst_billed_amount
        self.burst_billed_units = burst_billed_units
        self.burst_outstanding_amount = burst_outstanding_amount
        self.burst_outstanding_units = burst_outstanding_units
        self.total_usage_amount = total_usage_amount
        self.total_used_units = total_used_units

    @property
    def burst_rate(self):
        """Gets the burst_rate of this MeteredSubscriptionUsage.  # noqa: E501

        Unit price  # noqa: E501

        :return: The burst_rate of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._burst_rate

    @burst_rate.setter
    def burst_rate(self, burst_rate):
        """Sets the burst_rate of this MeteredSubscriptionUsage.

        Unit price  # noqa: E501

        :param burst_rate: The burst_rate of this MeteredSubscriptionUsage.  # noqa: E501
        :type burst_rate: float
        """

        self._burst_rate = burst_rate

    @property
    def allocated_hours(self):
        """Gets the allocated_hours of this MeteredSubscriptionUsage.  # noqa: E501

        Allocated hours  # noqa: E501

        :return: The allocated_hours of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._allocated_hours

    @allocated_hours.setter
    def allocated_hours(self, allocated_hours):
        """Sets the allocated_hours of this MeteredSubscriptionUsage.

        Allocated hours  # noqa: E501

        :param allocated_hours: The allocated_hours of this MeteredSubscriptionUsage.  # noqa: E501
        :type allocated_hours: float
        """

        self._allocated_hours = allocated_hours

    @property
    def plan_billed_amount(self):
        """Gets the plan_billed_amount of this MeteredSubscriptionUsage.  # noqa: E501

        Plan cost  # noqa: E501

        :return: The plan_billed_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._plan_billed_amount

    @plan_billed_amount.setter
    def plan_billed_amount(self, plan_billed_amount):
        """Sets the plan_billed_amount of this MeteredSubscriptionUsage.

        Plan cost  # noqa: E501

        :param plan_billed_amount: The plan_billed_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :type plan_billed_amount: float
        """

        self._plan_billed_amount = plan_billed_amount

    @property
    def plan_billed_units(self):
        """Gets the plan_billed_units of this MeteredSubscriptionUsage.  # noqa: E501

        Units included in plan  # noqa: E501

        :return: The plan_billed_units of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._plan_billed_units

    @plan_billed_units.setter
    def plan_billed_units(self, plan_billed_units):
        """Sets the plan_billed_units of this MeteredSubscriptionUsage.

        Units included in plan  # noqa: E501

        :param plan_billed_units: The plan_billed_units of this MeteredSubscriptionUsage.  # noqa: E501
        :type plan_billed_units: float
        """

        self._plan_billed_units = plan_billed_units

    @property
    def burst_billed_amount(self):
        """Gets the burst_billed_amount of this MeteredSubscriptionUsage.  # noqa: E501

        Amount billed  # noqa: E501

        :return: The burst_billed_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._burst_billed_amount

    @burst_billed_amount.setter
    def burst_billed_amount(self, burst_billed_amount):
        """Sets the burst_billed_amount of this MeteredSubscriptionUsage.

        Amount billed  # noqa: E501

        :param burst_billed_amount: The burst_billed_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :type burst_billed_amount: float
        """

        self._burst_billed_amount = burst_billed_amount

    @property
    def burst_billed_units(self):
        """Gets the burst_billed_units of this MeteredSubscriptionUsage.  # noqa: E501

        Units billed  # noqa: E501

        :return: The burst_billed_units of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._burst_billed_units

    @burst_billed_units.setter
    def burst_billed_units(self, burst_billed_units):
        """Sets the burst_billed_units of this MeteredSubscriptionUsage.

        Units billed  # noqa: E501

        :param burst_billed_units: The burst_billed_units of this MeteredSubscriptionUsage.  # noqa: E501
        :type burst_billed_units: float
        """

        self._burst_billed_units = burst_billed_units

    @property
    def burst_outstanding_amount(self):
        """Gets the burst_outstanding_amount of this MeteredSubscriptionUsage.  # noqa: E501

        Outstanding amount  # noqa: E501

        :return: The burst_outstanding_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._burst_outstanding_amount

    @burst_outstanding_amount.setter
    def burst_outstanding_amount(self, burst_outstanding_amount):
        """Sets the burst_outstanding_amount of this MeteredSubscriptionUsage.

        Outstanding amount  # noqa: E501

        :param burst_outstanding_amount: The burst_outstanding_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :type burst_outstanding_amount: float
        """

        self._burst_outstanding_amount = burst_outstanding_amount

    @property
    def burst_outstanding_units(self):
        """Gets the burst_outstanding_units of this MeteredSubscriptionUsage.  # noqa: E501

        Outstanding units  # noqa: E501

        :return: The burst_outstanding_units of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._burst_outstanding_units

    @burst_outstanding_units.setter
    def burst_outstanding_units(self, burst_outstanding_units):
        """Sets the burst_outstanding_units of this MeteredSubscriptionUsage.

        Outstanding units  # noqa: E501

        :param burst_outstanding_units: The burst_outstanding_units of this MeteredSubscriptionUsage.  # noqa: E501
        :type burst_outstanding_units: float
        """

        self._burst_outstanding_units = burst_outstanding_units

    @property
    def total_usage_amount(self):
        """Gets the total_usage_amount of this MeteredSubscriptionUsage.  # noqa: E501

        Total cost in cents for current period  # noqa: E501

        :return: The total_usage_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._total_usage_amount

    @total_usage_amount.setter
    def total_usage_amount(self, total_usage_amount):
        """Sets the total_usage_amount of this MeteredSubscriptionUsage.

        Total cost in cents for current period  # noqa: E501

        :param total_usage_amount: The total_usage_amount of this MeteredSubscriptionUsage.  # noqa: E501
        :type total_usage_amount: float
        """

        self._total_usage_amount = total_usage_amount

    @property
    def total_used_units(self):
        """Gets the total_used_units of this MeteredSubscriptionUsage.  # noqa: E501

        Total used units for current period  # noqa: E501

        :return: The total_used_units of this MeteredSubscriptionUsage.  # noqa: E501
        :rtype: float
        """
        return self._total_used_units

    @total_used_units.setter
    def total_used_units(self, total_used_units):
        """Sets the total_used_units of this MeteredSubscriptionUsage.

        Total used units for current period  # noqa: E501

        :param total_used_units: The total_used_units of this MeteredSubscriptionUsage.  # noqa: E501
        :type total_used_units: float
        """

        self._total_used_units = total_used_units

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeteredSubscriptionUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MeteredSubscriptionUsage):
            return True

        return self.to_dict() != other.to_dict()
