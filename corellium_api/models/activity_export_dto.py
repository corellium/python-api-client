# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class ActivityExportDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource': 'str',
        'order_by': 'str',
        'instance': 'str',
        'project': 'str',
        'actor': 'str',
        'search': 'str',
        'to': 'str',
        '_from': 'str'
    }

    attribute_map = {
        'resource': 'resource',
        'order_by': 'orderBy',
        'instance': 'instance',
        'project': 'project',
        'actor': 'actor',
        'search': 'search',
        'to': 'to',
        '_from': 'from'
    }

    def __init__(self, resource=None, order_by=None, instance=None, project=None, actor=None, search=None, to=None, _from=None, local_vars_configuration=None):  # noqa: E501
        """ActivityExportDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._resource = None
        self._order_by = None
        self._instance = None
        self._project = None
        self._actor = None
        self._search = None
        self._to = None
        self.__from = None
        self.discriminator = None

        self.resource = resource
        self.order_by = order_by
        self.instance = instance
        self.project = project
        self.actor = actor
        self.search = search
        self.to = to
        self._from = _from

    @property
    def resource(self):
        """Gets the resource of this ActivityExportDto.  # noqa: E501

        Event to filter on  # noqa: E501

        :return: The resource of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ActivityExportDto.

        Event to filter on  # noqa: E501

        :param resource: The resource of this ActivityExportDto.  # noqa: E501
        :type resource: str
        """

        self._resource = resource

    @property
    def order_by(self):
        """Gets the order_by of this ActivityExportDto.  # noqa: E501

        Column to order by  # noqa: E501

        :return: The order_by of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ActivityExportDto.

        Column to order by  # noqa: E501

        :param order_by: The order_by of this ActivityExportDto.  # noqa: E501
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def instance(self):
        """Gets the instance of this ActivityExportDto.  # noqa: E501

        Instance ID  # noqa: E501

        :return: The instance of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ActivityExportDto.

        Instance ID  # noqa: E501

        :param instance: The instance of this ActivityExportDto.  # noqa: E501
        :type instance: str
        """

        self._instance = instance

    @property
    def project(self):
        """Gets the project of this ActivityExportDto.  # noqa: E501

        Project ID  # noqa: E501

        :return: The project of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ActivityExportDto.

        Project ID  # noqa: E501

        :param project: The project of this ActivityExportDto.  # noqa: E501
        :type project: str
        """

        self._project = project

    @property
    def actor(self):
        """Gets the actor of this ActivityExportDto.  # noqa: E501

        User ID  # noqa: E501

        :return: The actor of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this ActivityExportDto.

        User ID  # noqa: E501

        :param actor: The actor of this ActivityExportDto.  # noqa: E501
        :type actor: str
        """

        self._actor = actor

    @property
    def search(self):
        """Gets the search of this ActivityExportDto.  # noqa: E501

        Arbitrary search string against activity metadata  # noqa: E501

        :return: The search of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this ActivityExportDto.

        Arbitrary search string against activity metadata  # noqa: E501

        :param search: The search of this ActivityExportDto.  # noqa: E501
        :type search: str
        """

        self._search = search

    @property
    def to(self):
        """Gets the to of this ActivityExportDto.  # noqa: E501

        Include activities up to given ISO 8601 Date  # noqa: E501

        :return: The to of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ActivityExportDto.

        Include activities up to given ISO 8601 Date  # noqa: E501

        :param to: The to of this ActivityExportDto.  # noqa: E501
        :type to: str
        """

        self._to = to

    @property
    def _from(self):
        """Gets the _from of this ActivityExportDto.  # noqa: E501

        Include activities from given ISO 8601 Date  # noqa: E501

        :return: The _from of this ActivityExportDto.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ActivityExportDto.

        Include activities from given ISO 8601 Date  # noqa: E501

        :param _from: The _from of this ActivityExportDto.  # noqa: E501
        :type _from: str
        """

        self.__from = _from

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityExportDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityExportDto):
            return True

        return self.to_dict() != other.to_dict()
