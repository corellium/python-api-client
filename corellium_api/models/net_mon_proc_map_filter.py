# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 4.5.0-16740
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class NetMonProcMapFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port_ranges': 'list[str]',
        'src_ports': 'list[str]',
        'dst_ports': 'list[str]',
        'ports': 'list[str]',
        'protocols': 'list[str]',
        'processes': 'list[str]'
    }

    attribute_map = {
        'port_ranges': 'portRanges',
        'src_ports': 'srcPorts',
        'dst_ports': 'dstPorts',
        'ports': 'ports',
        'protocols': 'protocols',
        'processes': 'processes'
    }

    def __init__(self, port_ranges=None, src_ports=None, dst_ports=None, ports=None, protocols=None, processes=None, local_vars_configuration=None):  # noqa: E501
        """NetMonProcMapFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._port_ranges = None
        self._src_ports = None
        self._dst_ports = None
        self._ports = None
        self._protocols = None
        self._processes = None
        self.discriminator = None

        self.port_ranges = port_ranges
        self.src_ports = src_ports
        self.dst_ports = dst_ports
        self.ports = ports
        self.protocols = protocols
        self.processes = processes

    @property
    def port_ranges(self):
        """Gets the port_ranges of this NetMonProcMapFilter.  # noqa: E501

          # noqa: E501

        :return: The port_ranges of this NetMonProcMapFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._port_ranges

    @port_ranges.setter
    def port_ranges(self, port_ranges):
        """Sets the port_ranges of this NetMonProcMapFilter.

          # noqa: E501

        :param port_ranges: The port_ranges of this NetMonProcMapFilter.  # noqa: E501
        :type port_ranges: list[str]
        """

        self._port_ranges = port_ranges

    @property
    def src_ports(self):
        """Gets the src_ports of this NetMonProcMapFilter.  # noqa: E501

          # noqa: E501

        :return: The src_ports of this NetMonProcMapFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_ports

    @src_ports.setter
    def src_ports(self, src_ports):
        """Sets the src_ports of this NetMonProcMapFilter.

          # noqa: E501

        :param src_ports: The src_ports of this NetMonProcMapFilter.  # noqa: E501
        :type src_ports: list[str]
        """

        self._src_ports = src_ports

    @property
    def dst_ports(self):
        """Gets the dst_ports of this NetMonProcMapFilter.  # noqa: E501

          # noqa: E501

        :return: The dst_ports of this NetMonProcMapFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._dst_ports

    @dst_ports.setter
    def dst_ports(self, dst_ports):
        """Sets the dst_ports of this NetMonProcMapFilter.

          # noqa: E501

        :param dst_ports: The dst_ports of this NetMonProcMapFilter.  # noqa: E501
        :type dst_ports: list[str]
        """

        self._dst_ports = dst_ports

    @property
    def ports(self):
        """Gets the ports of this NetMonProcMapFilter.  # noqa: E501

          # noqa: E501

        :return: The ports of this NetMonProcMapFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this NetMonProcMapFilter.

          # noqa: E501

        :param ports: The ports of this NetMonProcMapFilter.  # noqa: E501
        :type ports: list[str]
        """

        self._ports = ports

    @property
    def protocols(self):
        """Gets the protocols of this NetMonProcMapFilter.  # noqa: E501

          # noqa: E501

        :return: The protocols of this NetMonProcMapFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this NetMonProcMapFilter.

          # noqa: E501

        :param protocols: The protocols of this NetMonProcMapFilter.  # noqa: E501
        :type protocols: list[str]
        """

        self._protocols = protocols

    @property
    def processes(self):
        """Gets the processes of this NetMonProcMapFilter.  # noqa: E501

          # noqa: E501

        :return: The processes of this NetMonProcMapFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this NetMonProcMapFilter.

          # noqa: E501

        :param processes: The processes of this NetMonProcMapFilter.  # noqa: E501
        :type processes: list[str]
        """

        self._processes = processes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetMonProcMapFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetMonProcMapFilter):
            return True

        return self.to_dict() != other.to_dict()
