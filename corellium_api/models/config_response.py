# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class ConfigResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'on_site': 'bool',
        'show_domain_settings': 'bool',
        'version': 'str',
        'invalid_build': 'bool',
        'sep_sim': 'bool',
        'installer_available': 'bool',
        'invoiced_publishable_key': 'str',
        'stripe_public_key': 'str',
        'intercom_id': 'str',
        'aux_webhook': 'str',
        'gtm_id': 'str',
        'zapier_feedback_webhook': 'str',
        'zapier_bugs_webhook': 'str',
        'billing_backend': 'str',
        'maintenance': 'ConfigResponseMaintenance',
        'logging': 'Logging',
        'cloud_admin': 'str',
        'files_admin': 'str',
        'cloud_domain': 'str',
        'billing_domain': 'str',
        'app_domain': 'str',
        'max_network_monitor_file_size': 'str',
        'enable_firmware_image_upload': 'bool',
        'auth_providers': 'list[AuthProvider]',
        'snapshot_limit': 'float',
        'max_kernel_size': 'float',
        'max_ramdisk_size': 'float',
        'charm_sdk': 'str',
        'trial': 'Trial',
        'sentry_url': 'str',
        'domain_authentication_providers': 'bool',
        'default_ssid': 'str'
    }

    attribute_map = {
        'on_site': 'onSite',
        'show_domain_settings': 'showDomainSettings',
        'version': 'version',
        'invalid_build': 'invalidBuild',
        'sep_sim': 'sepSim',
        'installer_available': 'installerAvailable',
        'invoiced_publishable_key': 'invoicedPublishableKey',
        'stripe_public_key': 'stripePublicKey',
        'intercom_id': 'intercomId',
        'aux_webhook': 'auxWebhook',
        'gtm_id': 'gtmId',
        'zapier_feedback_webhook': 'zapierFeedbackWebhook',
        'zapier_bugs_webhook': 'zapierBugsWebhook',
        'billing_backend': 'billingBackend',
        'maintenance': 'maintenance',
        'logging': 'logging',
        'cloud_admin': 'cloudAdmin',
        'files_admin': 'filesAdmin',
        'cloud_domain': 'cloudDomain',
        'billing_domain': 'billingDomain',
        'app_domain': 'appDomain',
        'max_network_monitor_file_size': 'maxNetworkMonitorFileSize',
        'enable_firmware_image_upload': 'enableFirmwareImageUpload',
        'auth_providers': 'authProviders',
        'snapshot_limit': 'snapshotLimit',
        'max_kernel_size': 'maxKernelSize',
        'max_ramdisk_size': 'maxRamdiskSize',
        'charm_sdk': 'charmSDK',
        'trial': 'trial',
        'sentry_url': 'sentryUrl',
        'domain_authentication_providers': 'domainAuthenticationProviders',
        'default_ssid': 'defaultSsid'
    }

    def __init__(self, on_site=None, show_domain_settings=None, version=None, invalid_build=None, sep_sim=None, installer_available=None, invoiced_publishable_key=None, stripe_public_key=None, intercom_id=None, aux_webhook=None, gtm_id=None, zapier_feedback_webhook=None, zapier_bugs_webhook=None, billing_backend=None, maintenance=None, logging=None, cloud_admin=None, files_admin=None, cloud_domain=None, billing_domain=None, app_domain=None, max_network_monitor_file_size=None, enable_firmware_image_upload=None, auth_providers=None, snapshot_limit=None, max_kernel_size=None, max_ramdisk_size=None, charm_sdk=None, trial=None, sentry_url=None, domain_authentication_providers=None, default_ssid=None, local_vars_configuration=None):  # noqa: E501
        """ConfigResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._on_site = None
        self._show_domain_settings = None
        self._version = None
        self._invalid_build = None
        self._sep_sim = None
        self._installer_available = None
        self._invoiced_publishable_key = None
        self._stripe_public_key = None
        self._intercom_id = None
        self._aux_webhook = None
        self._gtm_id = None
        self._zapier_feedback_webhook = None
        self._zapier_bugs_webhook = None
        self._billing_backend = None
        self._maintenance = None
        self._logging = None
        self._cloud_admin = None
        self._files_admin = None
        self._cloud_domain = None
        self._billing_domain = None
        self._app_domain = None
        self._max_network_monitor_file_size = None
        self._enable_firmware_image_upload = None
        self._auth_providers = None
        self._snapshot_limit = None
        self._max_kernel_size = None
        self._max_ramdisk_size = None
        self._charm_sdk = None
        self._trial = None
        self._sentry_url = None
        self._domain_authentication_providers = None
        self._default_ssid = None
        self.discriminator = None

        self.on_site = on_site
        self.show_domain_settings = show_domain_settings
        self.version = version
        self.invalid_build = invalid_build
        self.sep_sim = sep_sim
        self.installer_available = installer_available
        self.invoiced_publishable_key = invoiced_publishable_key
        self.stripe_public_key = stripe_public_key
        self.intercom_id = intercom_id
        self.aux_webhook = aux_webhook
        self.gtm_id = gtm_id
        self.zapier_feedback_webhook = zapier_feedback_webhook
        self.zapier_bugs_webhook = zapier_bugs_webhook
        self.billing_backend = billing_backend
        self.maintenance = maintenance
        if logging is not None:
            self.logging = logging
        self.cloud_admin = cloud_admin
        self.files_admin = files_admin
        self.cloud_domain = cloud_domain
        self.billing_domain = billing_domain
        self.app_domain = app_domain
        self.max_network_monitor_file_size = max_network_monitor_file_size
        self.enable_firmware_image_upload = enable_firmware_image_upload
        self.auth_providers = auth_providers
        self.snapshot_limit = snapshot_limit
        self.max_kernel_size = max_kernel_size
        self.max_ramdisk_size = max_ramdisk_size
        self.charm_sdk = charm_sdk
        if trial is not None:
            self.trial = trial
        self.sentry_url = sentry_url
        self.domain_authentication_providers = domain_authentication_providers
        self.default_ssid = default_ssid

    @property
    def on_site(self):
        """Gets the on_site of this ConfigResponse.  # noqa: E501

        Denotes whether it's an on-site install  # noqa: E501

        :return: The on_site of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._on_site

    @on_site.setter
    def on_site(self, on_site):
        """Sets the on_site of this ConfigResponse.

        Denotes whether it's an on-site install  # noqa: E501

        :param on_site: The on_site of this ConfigResponse.  # noqa: E501
        :type on_site: bool
        """

        self._on_site = on_site

    @property
    def show_domain_settings(self):
        """Gets the show_domain_settings of this ConfigResponse.  # noqa: E501

        Denotes whether to show domain settings  # noqa: E501

        :return: The show_domain_settings of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_domain_settings

    @show_domain_settings.setter
    def show_domain_settings(self, show_domain_settings):
        """Sets the show_domain_settings of this ConfigResponse.

        Denotes whether to show domain settings  # noqa: E501

        :param show_domain_settings: The show_domain_settings of this ConfigResponse.  # noqa: E501
        :type show_domain_settings: bool
        """

        self._show_domain_settings = show_domain_settings

    @property
    def version(self):
        """Gets the version of this ConfigResponse.  # noqa: E501

        Denotes the version  # noqa: E501

        :return: The version of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigResponse.

        Denotes the version  # noqa: E501

        :param version: The version of this ConfigResponse.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def invalid_build(self):
        """Gets the invalid_build of this ConfigResponse.  # noqa: E501

        Denotes whether the build is invalid  # noqa: E501

        :return: The invalid_build of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._invalid_build

    @invalid_build.setter
    def invalid_build(self, invalid_build):
        """Sets the invalid_build of this ConfigResponse.

        Denotes whether the build is invalid  # noqa: E501

        :param invalid_build: The invalid_build of this ConfigResponse.  # noqa: E501
        :type invalid_build: bool
        """

        self._invalid_build = invalid_build

    @property
    def sep_sim(self):
        """Gets the sep_sim of this ConfigResponse.  # noqa: E501

        Denotes whether sepSim is enabled  # noqa: E501

        :return: The sep_sim of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._sep_sim

    @sep_sim.setter
    def sep_sim(self, sep_sim):
        """Sets the sep_sim of this ConfigResponse.

        Denotes whether sepSim is enabled  # noqa: E501

        :param sep_sim: The sep_sim of this ConfigResponse.  # noqa: E501
        :type sep_sim: bool
        """

        self._sep_sim = sep_sim

    @property
    def installer_available(self):
        """Gets the installer_available of this ConfigResponse.  # noqa: E501

        Denotes whether installer is available  # noqa: E501

        :return: The installer_available of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._installer_available

    @installer_available.setter
    def installer_available(self, installer_available):
        """Sets the installer_available of this ConfigResponse.

        Denotes whether installer is available  # noqa: E501

        :param installer_available: The installer_available of this ConfigResponse.  # noqa: E501
        :type installer_available: bool
        """

        self._installer_available = installer_available

    @property
    def invoiced_publishable_key(self):
        """Gets the invoiced_publishable_key of this ConfigResponse.  # noqa: E501

        API publishable key to use for Invoiced  # noqa: E501

        :return: The invoiced_publishable_key of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoiced_publishable_key

    @invoiced_publishable_key.setter
    def invoiced_publishable_key(self, invoiced_publishable_key):
        """Sets the invoiced_publishable_key of this ConfigResponse.

        API publishable key to use for Invoiced  # noqa: E501

        :param invoiced_publishable_key: The invoiced_publishable_key of this ConfigResponse.  # noqa: E501
        :type invoiced_publishable_key: str
        """

        self._invoiced_publishable_key = invoiced_publishable_key

    @property
    def stripe_public_key(self):
        """Gets the stripe_public_key of this ConfigResponse.  # noqa: E501

        Stripe public key  # noqa: E501

        :return: The stripe_public_key of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._stripe_public_key

    @stripe_public_key.setter
    def stripe_public_key(self, stripe_public_key):
        """Sets the stripe_public_key of this ConfigResponse.

        Stripe public key  # noqa: E501

        :param stripe_public_key: The stripe_public_key of this ConfigResponse.  # noqa: E501
        :type stripe_public_key: str
        """

        self._stripe_public_key = stripe_public_key

    @property
    def intercom_id(self):
        """Gets the intercom_id of this ConfigResponse.  # noqa: E501

        Intercom app ID, also known as workspace ID  # noqa: E501

        :return: The intercom_id of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._intercom_id

    @intercom_id.setter
    def intercom_id(self, intercom_id):
        """Sets the intercom_id of this ConfigResponse.

        Intercom app ID, also known as workspace ID  # noqa: E501

        :param intercom_id: The intercom_id of this ConfigResponse.  # noqa: E501
        :type intercom_id: str
        """

        self._intercom_id = intercom_id

    @property
    def aux_webhook(self):
        """Gets the aux_webhook of this ConfigResponse.  # noqa: E501

        Webhook URL for aux  # noqa: E501

        :return: The aux_webhook of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._aux_webhook

    @aux_webhook.setter
    def aux_webhook(self, aux_webhook):
        """Sets the aux_webhook of this ConfigResponse.

        Webhook URL for aux  # noqa: E501

        :param aux_webhook: The aux_webhook of this ConfigResponse.  # noqa: E501
        :type aux_webhook: str
        """

        self._aux_webhook = aux_webhook

    @property
    def gtm_id(self):
        """Gets the gtm_id of this ConfigResponse.  # noqa: E501

        Google Tag Manager  # noqa: E501

        :return: The gtm_id of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._gtm_id

    @gtm_id.setter
    def gtm_id(self, gtm_id):
        """Sets the gtm_id of this ConfigResponse.

        Google Tag Manager  # noqa: E501

        :param gtm_id: The gtm_id of this ConfigResponse.  # noqa: E501
        :type gtm_id: str
        """

        self._gtm_id = gtm_id

    @property
    def zapier_feedback_webhook(self):
        """Gets the zapier_feedback_webhook of this ConfigResponse.  # noqa: E501

        Webhook URL to send feedback into Productboard automatically  # noqa: E501

        :return: The zapier_feedback_webhook of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._zapier_feedback_webhook

    @zapier_feedback_webhook.setter
    def zapier_feedback_webhook(self, zapier_feedback_webhook):
        """Sets the zapier_feedback_webhook of this ConfigResponse.

        Webhook URL to send feedback into Productboard automatically  # noqa: E501

        :param zapier_feedback_webhook: The zapier_feedback_webhook of this ConfigResponse.  # noqa: E501
        :type zapier_feedback_webhook: str
        """

        self._zapier_feedback_webhook = zapier_feedback_webhook

    @property
    def zapier_bugs_webhook(self):
        """Gets the zapier_bugs_webhook of this ConfigResponse.  # noqa: E501

        Webhook URL to send frontend errors to Jira automatically  # noqa: E501

        :return: The zapier_bugs_webhook of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._zapier_bugs_webhook

    @zapier_bugs_webhook.setter
    def zapier_bugs_webhook(self, zapier_bugs_webhook):
        """Sets the zapier_bugs_webhook of this ConfigResponse.

        Webhook URL to send frontend errors to Jira automatically  # noqa: E501

        :param zapier_bugs_webhook: The zapier_bugs_webhook of this ConfigResponse.  # noqa: E501
        :type zapier_bugs_webhook: str
        """

        self._zapier_bugs_webhook = zapier_bugs_webhook

    @property
    def billing_backend(self):
        """Gets the billing_backend of this ConfigResponse.  # noqa: E501

        Default backend billing api name for new subscriptions (e.g. \"stripe\")  # noqa: E501

        :return: The billing_backend of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._billing_backend

    @billing_backend.setter
    def billing_backend(self, billing_backend):
        """Sets the billing_backend of this ConfigResponse.

        Default backend billing api name for new subscriptions (e.g. \"stripe\")  # noqa: E501

        :param billing_backend: The billing_backend of this ConfigResponse.  # noqa: E501
        :type billing_backend: str
        """

        self._billing_backend = billing_backend

    @property
    def maintenance(self):
        """Gets the maintenance of this ConfigResponse.  # noqa: E501


        :return: The maintenance of this ConfigResponse.  # noqa: E501
        :rtype: ConfigResponseMaintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this ConfigResponse.


        :param maintenance: The maintenance of this ConfigResponse.  # noqa: E501
        :type maintenance: ConfigResponseMaintenance
        """

        self._maintenance = maintenance

    @property
    def logging(self):
        """Gets the logging of this ConfigResponse.  # noqa: E501


        :return: The logging of this ConfigResponse.  # noqa: E501
        :rtype: Logging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this ConfigResponse.


        :param logging: The logging of this ConfigResponse.  # noqa: E501
        :type logging: Logging
        """

        self._logging = logging

    @property
    def cloud_admin(self):
        """Gets the cloud_admin of this ConfigResponse.  # noqa: E501

        URL for cloud admin login  # noqa: E501

        :return: The cloud_admin of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._cloud_admin

    @cloud_admin.setter
    def cloud_admin(self, cloud_admin):
        """Sets the cloud_admin of this ConfigResponse.

        URL for cloud admin login  # noqa: E501

        :param cloud_admin: The cloud_admin of this ConfigResponse.  # noqa: E501
        :type cloud_admin: str
        """

        self._cloud_admin = cloud_admin

    @property
    def files_admin(self):
        """Gets the files_admin of this ConfigResponse.  # noqa: E501

        URL for files admin login  # noqa: E501

        :return: The files_admin of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._files_admin

    @files_admin.setter
    def files_admin(self, files_admin):
        """Sets the files_admin of this ConfigResponse.

        URL for files admin login  # noqa: E501

        :param files_admin: The files_admin of this ConfigResponse.  # noqa: E501
        :type files_admin: str
        """

        self._files_admin = files_admin

    @property
    def cloud_domain(self):
        """Gets the cloud_domain of this ConfigResponse.  # noqa: E501

        Cloud domain name (usually corellium.com or staging.corellium.com)  # noqa: E501

        :return: The cloud_domain of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._cloud_domain

    @cloud_domain.setter
    def cloud_domain(self, cloud_domain):
        """Sets the cloud_domain of this ConfigResponse.

        Cloud domain name (usually corellium.com or staging.corellium.com)  # noqa: E501

        :param cloud_domain: The cloud_domain of this ConfigResponse.  # noqa: E501
        :type cloud_domain: str
        """

        self._cloud_domain = cloud_domain

    @property
    def billing_domain(self):
        """Gets the billing_domain of this ConfigResponse.  # noqa: E501

        Billing domain name  # noqa: E501

        :return: The billing_domain of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._billing_domain

    @billing_domain.setter
    def billing_domain(self, billing_domain):
        """Sets the billing_domain of this ConfigResponse.

        Billing domain name  # noqa: E501

        :param billing_domain: The billing_domain of this ConfigResponse.  # noqa: E501
        :type billing_domain: str
        """

        self._billing_domain = billing_domain

    @property
    def app_domain(self):
        """Gets the app_domain of this ConfigResponse.  # noqa: E501

        App domain name (usually app.corellium.com or app.staging.corellium.com)  # noqa: E501

        :return: The app_domain of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_domain

    @app_domain.setter
    def app_domain(self, app_domain):
        """Sets the app_domain of this ConfigResponse.

        App domain name (usually app.corellium.com or app.staging.corellium.com)  # noqa: E501

        :param app_domain: The app_domain of this ConfigResponse.  # noqa: E501
        :type app_domain: str
        """

        self._app_domain = app_domain

    @property
    def max_network_monitor_file_size(self):
        """Gets the max_network_monitor_file_size of this ConfigResponse.  # noqa: E501

        Maximum network monitor file size  # noqa: E501

        :return: The max_network_monitor_file_size of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._max_network_monitor_file_size

    @max_network_monitor_file_size.setter
    def max_network_monitor_file_size(self, max_network_monitor_file_size):
        """Sets the max_network_monitor_file_size of this ConfigResponse.

        Maximum network monitor file size  # noqa: E501

        :param max_network_monitor_file_size: The max_network_monitor_file_size of this ConfigResponse.  # noqa: E501
        :type max_network_monitor_file_size: str
        """

        self._max_network_monitor_file_size = max_network_monitor_file_size

    @property
    def enable_firmware_image_upload(self):
        """Gets the enable_firmware_image_upload of this ConfigResponse.  # noqa: E501

        Denotes whether users can upload firmware images  # noqa: E501

        :return: The enable_firmware_image_upload of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_firmware_image_upload

    @enable_firmware_image_upload.setter
    def enable_firmware_image_upload(self, enable_firmware_image_upload):
        """Sets the enable_firmware_image_upload of this ConfigResponse.

        Denotes whether users can upload firmware images  # noqa: E501

        :param enable_firmware_image_upload: The enable_firmware_image_upload of this ConfigResponse.  # noqa: E501
        :type enable_firmware_image_upload: bool
        """

        self._enable_firmware_image_upload = enable_firmware_image_upload

    @property
    def auth_providers(self):
        """Gets the auth_providers of this ConfigResponse.  # noqa: E501

        Auth providers  # noqa: E501

        :return: The auth_providers of this ConfigResponse.  # noqa: E501
        :rtype: list[AuthProvider]
        """
        return self._auth_providers

    @auth_providers.setter
    def auth_providers(self, auth_providers):
        """Sets the auth_providers of this ConfigResponse.

        Auth providers  # noqa: E501

        :param auth_providers: The auth_providers of this ConfigResponse.  # noqa: E501
        :type auth_providers: list[AuthProvider]
        """

        self._auth_providers = auth_providers

    @property
    def snapshot_limit(self):
        """Gets the snapshot_limit of this ConfigResponse.  # noqa: E501

        Maximum number of snapshots to allow  # noqa: E501

        :return: The snapshot_limit of this ConfigResponse.  # noqa: E501
        :rtype: float
        """
        return self._snapshot_limit

    @snapshot_limit.setter
    def snapshot_limit(self, snapshot_limit):
        """Sets the snapshot_limit of this ConfigResponse.

        Maximum number of snapshots to allow  # noqa: E501

        :param snapshot_limit: The snapshot_limit of this ConfigResponse.  # noqa: E501
        :type snapshot_limit: float
        """

        self._snapshot_limit = snapshot_limit

    @property
    def max_kernel_size(self):
        """Gets the max_kernel_size of this ConfigResponse.  # noqa: E501

        The maximum size, in bytes, (default: 100 MB) that an uploaded kernel should be  # noqa: E501

        :return: The max_kernel_size of this ConfigResponse.  # noqa: E501
        :rtype: float
        """
        return self._max_kernel_size

    @max_kernel_size.setter
    def max_kernel_size(self, max_kernel_size):
        """Sets the max_kernel_size of this ConfigResponse.

        The maximum size, in bytes, (default: 100 MB) that an uploaded kernel should be  # noqa: E501

        :param max_kernel_size: The max_kernel_size of this ConfigResponse.  # noqa: E501
        :type max_kernel_size: float
        """

        self._max_kernel_size = max_kernel_size

    @property
    def max_ramdisk_size(self):
        """Gets the max_ramdisk_size of this ConfigResponse.  # noqa: E501

        The maximum size, in bytes, (default: 500 MB) that an uploaded ramdisk should be  # noqa: E501

        :return: The max_ramdisk_size of this ConfigResponse.  # noqa: E501
        :rtype: float
        """
        return self._max_ramdisk_size

    @max_ramdisk_size.setter
    def max_ramdisk_size(self, max_ramdisk_size):
        """Sets the max_ramdisk_size of this ConfigResponse.

        The maximum size, in bytes, (default: 500 MB) that an uploaded ramdisk should be  # noqa: E501

        :param max_ramdisk_size: The max_ramdisk_size of this ConfigResponse.  # noqa: E501
        :type max_ramdisk_size: float
        """

        self._max_ramdisk_size = max_ramdisk_size

    @property
    def charm_sdk(self):
        """Gets the charm_sdk of this ConfigResponse.  # noqa: E501

        Denotes whether charmSDK is enabled  # noqa: E501

        :return: The charm_sdk of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._charm_sdk

    @charm_sdk.setter
    def charm_sdk(self, charm_sdk):
        """Sets the charm_sdk of this ConfigResponse.

        Denotes whether charmSDK is enabled  # noqa: E501

        :param charm_sdk: The charm_sdk of this ConfigResponse.  # noqa: E501
        :type charm_sdk: str
        """

        self._charm_sdk = charm_sdk

    @property
    def trial(self):
        """Gets the trial of this ConfigResponse.  # noqa: E501


        :return: The trial of this ConfigResponse.  # noqa: E501
        :rtype: Trial
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this ConfigResponse.


        :param trial: The trial of this ConfigResponse.  # noqa: E501
        :type trial: Trial
        """

        self._trial = trial

    @property
    def sentry_url(self):
        """Gets the sentry_url of this ConfigResponse.  # noqa: E501

        Sentry URL  # noqa: E501

        :return: The sentry_url of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._sentry_url

    @sentry_url.setter
    def sentry_url(self, sentry_url):
        """Sets the sentry_url of this ConfigResponse.

        Sentry URL  # noqa: E501

        :param sentry_url: The sentry_url of this ConfigResponse.  # noqa: E501
        :type sentry_url: str
        """

        self._sentry_url = sentry_url

    @property
    def domain_authentication_providers(self):
        """Gets the domain_authentication_providers of this ConfigResponse.  # noqa: E501

        If enabled, adds the default providers in their current configuration  # noqa: E501

        :return: The domain_authentication_providers of this ConfigResponse.  # noqa: E501
        :rtype: bool
        """
        return self._domain_authentication_providers

    @domain_authentication_providers.setter
    def domain_authentication_providers(self, domain_authentication_providers):
        """Sets the domain_authentication_providers of this ConfigResponse.

        If enabled, adds the default providers in their current configuration  # noqa: E501

        :param domain_authentication_providers: The domain_authentication_providers of this ConfigResponse.  # noqa: E501
        :type domain_authentication_providers: bool
        """

        self._domain_authentication_providers = domain_authentication_providers

    @property
    def default_ssid(self):
        """Gets the default_ssid of this ConfigResponse.  # noqa: E501

        The configured Default SSID from /etc/corellium/setup.json  # noqa: E501

        :return: The default_ssid of this ConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_ssid

    @default_ssid.setter
    def default_ssid(self, default_ssid):
        """Sets the default_ssid of this ConfigResponse.

        The configured Default SSID from /etc/corellium/setup.json  # noqa: E501

        :param default_ssid: The default_ssid of this ConfigResponse.  # noqa: E501
        :type default_ssid: str
        """

        self._default_ssid = default_ssid

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigResponse):
            return True

        return self.to_dict() != other.to_dict()
