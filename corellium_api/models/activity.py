# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class Activity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'domain': 'str',
        'actor': 'str',
        'event': 'str',
        'outcome': 'str',
        'metadata': 'object',
        'corellium_version': 'str',
        'project_id': 'str',
        'instance_id': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'domain': 'domain',
        'actor': 'actor',
        'event': 'event',
        'outcome': 'outcome',
        'metadata': 'metadata',
        'corellium_version': 'corelliumVersion',
        'project_id': 'projectId',
        'instance_id': 'instanceId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, identifier=None, domain=None, actor=None, event=None, outcome=None, metadata=None, corellium_version=None, project_id=None, instance_id=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Activity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._domain = None
        self._actor = None
        self._event = None
        self._outcome = None
        self._metadata = None
        self._corellium_version = None
        self._project_id = None
        self._instance_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.identifier = identifier
        self.domain = domain
        self.actor = actor
        self.event = event
        self.outcome = outcome
        self.metadata = metadata
        self.corellium_version = corellium_version
        self.project_id = project_id
        self.instance_id = instance_id
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def identifier(self):
        """Gets the identifier of this Activity.  # noqa: E501

        Unique identifier for the activity entry  # noqa: E501

        :return: The identifier of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Activity.

        Unique identifier for the activity entry  # noqa: E501

        :param identifier: The identifier of this Activity.  # noqa: E501
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def domain(self):
        """Gets the domain of this Activity.  # noqa: E501

        Unique identifier for the domain  # noqa: E501

        :return: The domain of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Activity.

        Unique identifier for the domain  # noqa: E501

        :param domain: The domain of this Activity.  # noqa: E501
        :type domain: str
        """

        self._domain = domain

    @property
    def actor(self):
        """Gets the actor of this Activity.  # noqa: E501

        Unique identifier for the user  # noqa: E501

        :return: The actor of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Activity.

        Unique identifier for the user  # noqa: E501

        :param actor: The actor of this Activity.  # noqa: E501
        :type actor: str
        """

        self._actor = actor

    @property
    def event(self):
        """Gets the event of this Activity.  # noqa: E501

        Resource associated with the activity  # noqa: E501

        :return: The event of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Activity.

        Resource associated with the activity  # noqa: E501

        :param event: The event of this Activity.  # noqa: E501
        :type event: str
        """

        self._event = event

    @property
    def outcome(self):
        """Gets the outcome of this Activity.  # noqa: E501

        The outcome of the activity  # noqa: E501

        :return: The outcome of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this Activity.

        The outcome of the activity  # noqa: E501

        :param outcome: The outcome of this Activity.  # noqa: E501
        :type outcome: str
        """

        self._outcome = outcome

    @property
    def metadata(self):
        """Gets the metadata of this Activity.  # noqa: E501

        Related information that pertains to the activity  # noqa: E501

        :return: The metadata of this Activity.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Activity.

        Related information that pertains to the activity  # noqa: E501

        :param metadata: The metadata of this Activity.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def corellium_version(self):
        """Gets the corellium_version of this Activity.  # noqa: E501

        The Corellium version this activity occurred in  # noqa: E501

        :return: The corellium_version of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._corellium_version

    @corellium_version.setter
    def corellium_version(self, corellium_version):
        """Sets the corellium_version of this Activity.

        The Corellium version this activity occurred in  # noqa: E501

        :param corellium_version: The corellium_version of this Activity.  # noqa: E501
        :type corellium_version: str
        """

        self._corellium_version = corellium_version

    @property
    def project_id(self):
        """Gets the project_id of this Activity.  # noqa: E501

        Unique identifier for project if applicable  # noqa: E501

        :return: The project_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Activity.

        Unique identifier for project if applicable  # noqa: E501

        :param project_id: The project_id of this Activity.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def instance_id(self):
        """Gets the instance_id of this Activity.  # noqa: E501

        Unique identifier for instance if applicable  # noqa: E501

        :return: The instance_id of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Activity.

        Unique identifier for instance if applicable  # noqa: E501

        :param instance_id: The instance_id of this Activity.  # noqa: E501
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def created_at(self):
        """Gets the created_at of this Activity.  # noqa: E501

        Timestamp of when the activity was created  # noqa: E501

        :return: The created_at of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Activity.

        Timestamp of when the activity was created  # noqa: E501

        :param created_at: The created_at of this Activity.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Activity.  # noqa: E501

        Timestamp of the activity was last updated  # noqa: E501

        :return: The updated_at of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Activity.

        Timestamp of the activity was last updated  # noqa: E501

        :param updated_at: The updated_at of this Activity.  # noqa: E501
        :type updated_at: str
        """

        self._updated_at = updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Activity):
            return True

        return self.to_dict() != other.to_dict()
