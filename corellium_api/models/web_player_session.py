# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 4.2.0-6a4b86f
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class WebPlayerSession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'token': 'str',
        'expiration': 'float'
    }

    attribute_map = {
        'identifier': 'identifier',
        'token': 'token',
        'expiration': 'expiration'
    }

    def __init__(self, identifier=None, token=None, expiration=None, local_vars_configuration=None):  # noqa: E501
        """WebPlayerSession - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._token = None
        self._expiration = None
        self.discriminator = None

        self.identifier = identifier
        self.token = token
        self.expiration = expiration

    @property
    def identifier(self):
        """Gets the identifier of this WebPlayerSession.  # noqa: E501

        New Session Identifier  # noqa: E501

        :return: The identifier of this WebPlayerSession.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this WebPlayerSession.

        New Session Identifier  # noqa: E501

        :param identifier: The identifier of this WebPlayerSession.  # noqa: E501
        :type identifier: str
        """
        if self.local_vars_configuration.client_side_validation and identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def token(self):
        """Gets the token of this WebPlayerSession.  # noqa: E501

        Session Token  # noqa: E501

        :return: The token of this WebPlayerSession.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this WebPlayerSession.

        Session Token  # noqa: E501

        :param token: The token of this WebPlayerSession.  # noqa: E501
        :type token: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def expiration(self):
        """Gets the expiration of this WebPlayerSession.  # noqa: E501

        Expiration in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z  # noqa: E501

        :return: The expiration of this WebPlayerSession.  # noqa: E501
        :rtype: float
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this WebPlayerSession.

        Expiration in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z  # noqa: E501

        :param expiration: The expiration of this WebPlayerSession.  # noqa: E501
        :type expiration: float
        """
        if self.local_vars_configuration.client_side_validation and expiration is None:  # noqa: E501
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebPlayerSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebPlayerSession):
            return True

        return self.to_dict() != other.to_dict()
