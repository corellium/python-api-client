# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 4.2.0-6a4b86f
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class Hook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'label': 'str',
        'address': 'str',
        'patch': 'str',
        'patch_type': 'str',
        'enabled': 'bool',
        'created_at': 'str',
        'updated_at': 'str',
        'instance_id': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'label': 'label',
        'address': 'address',
        'patch': 'patch',
        'patch_type': 'patchType',
        'enabled': 'enabled',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'instance_id': 'instanceId'
    }

    def __init__(self, identifier=None, label=None, address=None, patch=None, patch_type=None, enabled=None, created_at=None, updated_at=None, instance_id=None, local_vars_configuration=None):  # noqa: E501
        """Hook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._label = None
        self._address = None
        self._patch = None
        self._patch_type = None
        self._enabled = None
        self._created_at = None
        self._updated_at = None
        self._instance_id = None
        self.discriminator = None

        self.identifier = identifier
        self.label = label
        self.address = address
        self.patch = patch
        self.patch_type = patch_type
        self.enabled = enabled
        self.created_at = created_at
        self.updated_at = updated_at
        self.instance_id = instance_id

    @property
    def identifier(self):
        """Gets the identifier of this Hook.  # noqa: E501

        Identifier  # noqa: E501

        :return: The identifier of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Hook.

        Identifier  # noqa: E501

        :param identifier: The identifier of this Hook.  # noqa: E501
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def label(self):
        """Gets the label of this Hook.  # noqa: E501

        Label  # noqa: E501

        :return: The label of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Hook.

        Label  # noqa: E501

        :param label: The label of this Hook.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def address(self):
        """Gets the address of this Hook.  # noqa: E501

        Address  # noqa: E501

        :return: The address of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Hook.

        Address  # noqa: E501

        :param address: The address of this Hook.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def patch(self):
        """Gets the patch of this Hook.  # noqa: E501

        Patch  # noqa: E501

        :return: The patch of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this Hook.

        Patch  # noqa: E501

        :param patch: The patch of this Hook.  # noqa: E501
        :type patch: str
        """

        self._patch = patch

    @property
    def patch_type(self):
        """Gets the patch_type of this Hook.  # noqa: E501

        Patch Type  # noqa: E501

        :return: The patch_type of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._patch_type

    @patch_type.setter
    def patch_type(self, patch_type):
        """Sets the patch_type of this Hook.

        Patch Type  # noqa: E501

        :param patch_type: The patch_type of this Hook.  # noqa: E501
        :type patch_type: str
        """
        allowed_values = [None,"csmfcc", "csmfvm"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and patch_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `patch_type` ({0}), must be one of {1}"  # noqa: E501
                .format(patch_type, allowed_values)
            )

        self._patch_type = patch_type

    @property
    def enabled(self):
        """Gets the enabled of this Hook.  # noqa: E501

        If true, instances can call required hooks  # noqa: E501

        :return: The enabled of this Hook.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Hook.

        If true, instances can call required hooks  # noqa: E501

        :param enabled: The enabled of this Hook.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def created_at(self):
        """Gets the created_at of this Hook.  # noqa: E501

        Created Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z  # noqa: E501

        :return: The created_at of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Hook.

        Created Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z  # noqa: E501

        :param created_at: The created_at of this Hook.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Hook.  # noqa: E501

        Updated Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z  # noqa: E501

        :return: The updated_at of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Hook.

        Updated Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z  # noqa: E501

        :param updated_at: The updated_at of this Hook.  # noqa: E501
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def instance_id(self):
        """Gets the instance_id of this Hook.  # noqa: E501

        Instance Id  # noqa: E501

        :return: The instance_id of this Hook.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Hook.

        Instance Id  # noqa: E501

        :param instance_id: The instance_id of this Hook.  # noqa: E501
        :type instance_id: str
        """

        self._instance_id = instance_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Hook):
            return True

        return self.to_dict() != other.to_dict()
