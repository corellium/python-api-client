# coding: utf-8

"""
    Corellium API

    REST API to manage your virtual devices.  # noqa: E501

    The version of the OpenAPI document: 7.3.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from corellium_api.configuration import Configuration


class SharedSnapshotsInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'model': 'str',
        'shared_on': 'float',
        'shared_with_member': 'str',
        'shared_by': 'SnapshotOwner'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'model': 'model',
        'shared_on': 'sharedOn',
        'shared_with_member': 'sharedWithMember',
        'shared_by': 'sharedBy'
    }

    def __init__(self, id=None, name=None, model=None, shared_on=None, shared_with_member=None, shared_by=None, local_vars_configuration=None):  # noqa: E501
        """SharedSnapshotsInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._model = None
        self._shared_on = None
        self._shared_with_member = None
        self._shared_by = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.model = model
        self.shared_on = shared_on
        self.shared_with_member = shared_with_member
        if shared_by is not None:
            self.shared_by = shared_by

    @property
    def id(self):
        """Gets the id of this SharedSnapshotsInfo.  # noqa: E501

        UUID of the snapshot  # noqa: E501

        :return: The id of this SharedSnapshotsInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedSnapshotsInfo.

        UUID of the snapshot  # noqa: E501

        :param id: The id of this SharedSnapshotsInfo.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SharedSnapshotsInfo.  # noqa: E501

        Snapshot name  # noqa: E501

        :return: The name of this SharedSnapshotsInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedSnapshotsInfo.

        Snapshot name  # noqa: E501

        :param name: The name of this SharedSnapshotsInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def model(self):
        """Gets the model of this SharedSnapshotsInfo.  # noqa: E501

        Device model  # noqa: E501

        :return: The model of this SharedSnapshotsInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SharedSnapshotsInfo.

        Device model  # noqa: E501

        :param model: The model of this SharedSnapshotsInfo.  # noqa: E501
        :type model: str
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def shared_on(self):
        """Gets the shared_on of this SharedSnapshotsInfo.  # noqa: E501

        UNIX Date of when the snapshot was first shared with member  # noqa: E501

        :return: The shared_on of this SharedSnapshotsInfo.  # noqa: E501
        :rtype: float
        """
        return self._shared_on

    @shared_on.setter
    def shared_on(self, shared_on):
        """Sets the shared_on of this SharedSnapshotsInfo.

        UNIX Date of when the snapshot was first shared with member  # noqa: E501

        :param shared_on: The shared_on of this SharedSnapshotsInfo.  # noqa: E501
        :type shared_on: float
        """
        if self.local_vars_configuration.client_side_validation and shared_on is None:  # noqa: E501
            raise ValueError("Invalid value for `shared_on`, must not be `None`")  # noqa: E501

        self._shared_on = shared_on

    @property
    def shared_with_member(self):
        """Gets the shared_with_member of this SharedSnapshotsInfo.  # noqa: E501

        The member who the snapshot was shared with. Only present in sharedWithUser  # noqa: E501

        :return: The shared_with_member of this SharedSnapshotsInfo.  # noqa: E501
        :rtype: str
        """
        return self._shared_with_member

    @shared_with_member.setter
    def shared_with_member(self, shared_with_member):
        """Sets the shared_with_member of this SharedSnapshotsInfo.

        The member who the snapshot was shared with. Only present in sharedWithUser  # noqa: E501

        :param shared_with_member: The shared_with_member of this SharedSnapshotsInfo.  # noqa: E501
        :type shared_with_member: str
        """

        self._shared_with_member = shared_with_member

    @property
    def shared_by(self):
        """Gets the shared_by of this SharedSnapshotsInfo.  # noqa: E501


        :return: The shared_by of this SharedSnapshotsInfo.  # noqa: E501
        :rtype: SnapshotOwner
        """
        return self._shared_by

    @shared_by.setter
    def shared_by(self, shared_by):
        """Sets the shared_by of this SharedSnapshotsInfo.


        :param shared_by: The shared_by of this SharedSnapshotsInfo.  # noqa: E501
        :type shared_by: SnapshotOwner
        """

        self._shared_by = shared_by

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedSnapshotsInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedSnapshotsInfo):
            return True

        return self.to_dict() != other.to_dict()
